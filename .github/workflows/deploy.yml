name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  APP_NAME: church-course-tracker

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        pytest
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/church-course-tracker/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend/church-course-tracker
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend/church-course-tracker
        npm test -- --watch=false --browsers=ChromeHeadless
    
    - name: Build frontend
      run: |
        cd frontend/church-course-tracker
        npm run build --configuration=production

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push backend image
      run: |
        cd backend
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.APP_NAME }}-backend
        IMAGE_TAG: ${{ github.sha }}
    
    - name: Deploy frontend to S3
      run: |
        cd frontend/church-course-tracker
        npm ci
        npm run build --configuration=production
        aws s3 sync dist/church-course-tracker/ s3://${{ env.APP_NAME }}-static --delete
    
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.APP_NAME }}-cluster \
          --service ${{ env.APP_NAME }}-service \
          --force-new-deployment
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.APP_NAME }}-cluster \
          --services ${{ env.APP_NAME }}-service
    
    - name: Run database migrations
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.APP_NAME }}-cluster --service-name ${{ env.APP_NAME }}-service --query 'taskArns[0]' --output text)
        if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
          aws ecs execute-command \
            --cluster ${{ env.APP_NAME }}-cluster \
            --task $TASK_ARN \
            --container backend \
            --command "alembic upgrade head" \
            --interactive
        fi
